// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.2
// source: blip/blip.proto

package blip

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VoteType int32

const (
	VoteType_VOTE_TYPE_UNSPECIFIED VoteType = 0
	VoteType_VOTE_TYPE_UPVOTE      VoteType = 1
	VoteType_VOTE_TYPE_DOWNVOTE    VoteType = 2
)

// Enum value maps for VoteType.
var (
	VoteType_name = map[int32]string{
		0: "VOTE_TYPE_UNSPECIFIED",
		1: "VOTE_TYPE_UPVOTE",
		2: "VOTE_TYPE_DOWNVOTE",
	}
	VoteType_value = map[string]int32{
		"VOTE_TYPE_UNSPECIFIED": 0,
		"VOTE_TYPE_UPVOTE":      1,
		"VOTE_TYPE_DOWNVOTE":    2,
	}
)

func (x VoteType) Enum() *VoteType {
	p := new(VoteType)
	*p = x
	return p
}

func (x VoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_blip_blip_proto_enumTypes[0].Descriptor()
}

func (VoteType) Type() protoreflect.EnumType {
	return &file_blip_blip_proto_enumTypes[0]
}

func (x VoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoteType.Descriptor instead.
func (VoteType) EnumDescriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{0}
}

type TargetType int32

const (
	TargetType_TARGET_TYPE_UNSPECIFIED TargetType = 0
	TargetType_TARGET_TYPE_BLIP        TargetType = 1
	TargetType_TARGET_TYPE_COMMENT     TargetType = 2
)

// Enum value maps for TargetType.
var (
	TargetType_name = map[int32]string{
		0: "TARGET_TYPE_UNSPECIFIED",
		1: "TARGET_TYPE_BLIP",
		2: "TARGET_TYPE_COMMENT",
	}
	TargetType_value = map[string]int32{
		"TARGET_TYPE_UNSPECIFIED": 0,
		"TARGET_TYPE_BLIP":        1,
		"TARGET_TYPE_COMMENT":     2,
	}
)

func (x TargetType) Enum() *TargetType {
	p := new(TargetType)
	*p = x
	return p
}

func (x TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_blip_blip_proto_enumTypes[1].Descriptor()
}

func (TargetType) Type() protoreflect.EnumType {
	return &file_blip_blip_proto_enumTypes[1]
}

func (x TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetType.Descriptor instead.
func (TargetType) EnumDescriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{1}
}

type CreateBlipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	AuthorId      string                 `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,3,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,4,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	ReblipOf      *string                `protobuf:"bytes,5,opt,name=reblip_of,json=reblipOf,proto3,oneof" json:"reblip_of,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlipRequest) Reset() {
	*x = CreateBlipRequest{}
	mi := &file_blip_blip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlipRequest) ProtoMessage() {}

func (x *CreateBlipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlipRequest.ProtoReflect.Descriptor instead.
func (*CreateBlipRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBlipRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateBlipRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *CreateBlipRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *CreateBlipRequest) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

func (x *CreateBlipRequest) GetReblipOf() string {
	if x != nil && x.ReblipOf != nil {
		return *x.ReblipOf
	}
	return ""
}

type CreateBlipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blip          *Blip                  `protobuf:"bytes,1,opt,name=blip,proto3" json:"blip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlipResponse) Reset() {
	*x = CreateBlipResponse{}
	mi := &file_blip_blip_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlipResponse) ProtoMessage() {}

func (x *CreateBlipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlipResponse.ProtoReflect.Descriptor instead.
func (*CreateBlipResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBlipResponse) GetBlip() *Blip {
	if x != nil {
		return x.Blip
	}
	return nil
}

type GetBlipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // LUID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlipRequest) Reset() {
	*x = GetBlipRequest{}
	mi := &file_blip_blip_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlipRequest) ProtoMessage() {}

func (x *GetBlipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlipRequest.ProtoReflect.Descriptor instead.
func (*GetBlipRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{2}
}

func (x *GetBlipRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBlipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blip          *Blip                  `protobuf:"bytes,1,opt,name=blip,proto3" json:"blip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlipResponse) Reset() {
	*x = GetBlipResponse{}
	mi := &file_blip_blip_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlipResponse) ProtoMessage() {}

func (x *GetBlipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlipResponse.ProtoReflect.Descriptor instead.
func (*GetBlipResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{3}
}

func (x *GetBlipResponse) GetBlip() *Blip {
	if x != nil {
		return x.Blip
	}
	return nil
}

type ListBlipsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	AuthorId      *string                `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3,oneof" json:"author_id,omitempty"`
	PageSize      *int32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     *string                `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBlipsRequest) Reset() {
	*x = ListBlipsRequest{}
	mi := &file_blip_blip_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlipsRequest) ProtoMessage() {}

func (x *ListBlipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlipsRequest.ProtoReflect.Descriptor instead.
func (*ListBlipsRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{4}
}

func (x *ListBlipsRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *ListBlipsRequest) GetAuthorId() string {
	if x != nil && x.AuthorId != nil {
		return *x.AuthorId
	}
	return ""
}

func (x *ListBlipsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListBlipsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ListBlipsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blips         []*Blip                `protobuf:"bytes,1,rep,name=blips,proto3" json:"blips,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBlipsResponse) Reset() {
	*x = ListBlipsResponse{}
	mi := &file_blip_blip_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlipsResponse) ProtoMessage() {}

func (x *ListBlipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlipsResponse.ProtoReflect.Descriptor instead.
func (*ListBlipsResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{5}
}

func (x *ListBlipsResponse) GetBlips() []*Blip {
	if x != nil {
		return x.Blips
	}
	return nil
}

func (x *ListBlipsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteBlipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // LUID
	AuthorId      string                 `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"` // For authorization
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBlipRequest) Reset() {
	*x = DeleteBlipRequest{}
	mi := &file_blip_blip_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBlipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlipRequest) ProtoMessage() {}

func (x *DeleteBlipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlipRequest.ProtoReflect.Descriptor instead.
func (*DeleteBlipRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteBlipRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteBlipRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

type DeleteBlipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBlipResponse) Reset() {
	*x = DeleteBlipResponse{}
	mi := &file_blip_blip_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBlipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlipResponse) ProtoMessage() {}

func (x *DeleteBlipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlipResponse.ProtoReflect.Descriptor instead.
func (*DeleteBlipResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{7}
}

type UpdateBlipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // LUID
	AuthorId      string                 `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"` // For authorization
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,4,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBlipRequest) Reset() {
	*x = UpdateBlipRequest{}
	mi := &file_blip_blip_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBlipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlipRequest) ProtoMessage() {}

func (x *UpdateBlipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlipRequest.ProtoReflect.Descriptor instead.
func (*UpdateBlipRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateBlipRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBlipRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *UpdateBlipRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateBlipRequest) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

type UpdateBlipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blip          *Blip                  `protobuf:"bytes,1,opt,name=blip,proto3" json:"blip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBlipResponse) Reset() {
	*x = UpdateBlipResponse{}
	mi := &file_blip_blip_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBlipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlipResponse) ProtoMessage() {}

func (x *UpdateBlipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlipResponse.ProtoReflect.Descriptor instead.
func (*UpdateBlipResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateBlipResponse) GetBlip() *Blip {
	if x != nil {
		return x.Blip
	}
	return nil
}

type BlipMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Upvotes       int64                  `protobuf:"varint,1,opt,name=upvotes,proto3" json:"upvotes,omitempty"`
	Downvotes     int64                  `protobuf:"varint,2,opt,name=downvotes,proto3" json:"downvotes,omitempty"`
	CommentsCount int64                  `protobuf:"varint,3,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
	ReblipCount   int64                  `protobuf:"varint,4,opt,name=reblip_count,json=reblipCount,proto3" json:"reblip_count,omitempty"`
	LastActivity  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	TrendingScore float64                `protobuf:"fixed64,6,opt,name=trending_score,json=trendingScore,proto3" json:"trending_score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlipMetadata) Reset() {
	*x = BlipMetadata{}
	mi := &file_blip_blip_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlipMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlipMetadata) ProtoMessage() {}

func (x *BlipMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlipMetadata.ProtoReflect.Descriptor instead.
func (*BlipMetadata) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{10}
}

func (x *BlipMetadata) GetUpvotes() int64 {
	if x != nil {
		return x.Upvotes
	}
	return 0
}

func (x *BlipMetadata) GetDownvotes() int64 {
	if x != nil {
		return x.Downvotes
	}
	return 0
}

func (x *BlipMetadata) GetCommentsCount() int64 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *BlipMetadata) GetReblipCount() int64 {
	if x != nil {
		return x.ReblipCount
	}
	return 0
}

func (x *BlipMetadata) GetLastActivity() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivity
	}
	return nil
}

func (x *BlipMetadata) GetTrendingScore() float64 {
	if x != nil {
		return x.TrendingScore
	}
	return 0
}

type Blip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // LUID
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	AuthorId      string                 `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,4,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,5,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	ReblipOf      *string                `protobuf:"bytes,6,opt,name=reblip_of,json=reblipOf,proto3,oneof" json:"reblip_of,omitempty"` // If this is a reblip
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Metadata      *BlipMetadata          `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	UserVote      *UserVoteStatus        `protobuf:"bytes,10,opt,name=user_vote,json=userVote,proto3,oneof" json:"user_vote,omitempty"` // Present if user is authenticated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Blip) Reset() {
	*x = Blip{}
	mi := &file_blip_blip_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blip) ProtoMessage() {}

func (x *Blip) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blip.ProtoReflect.Descriptor instead.
func (*Blip) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{11}
}

func (x *Blip) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Blip) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Blip) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Blip) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *Blip) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

func (x *Blip) GetReblipOf() string {
	if x != nil && x.ReblipOf != nil {
		return *x.ReblipOf
	}
	return ""
}

func (x *Blip) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Blip) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Blip) GetMetadata() *BlipMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Blip) GetUserVote() *UserVoteStatus {
	if x != nil {
		return x.UserVote
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // LUID
	ParentBlipId  string                 `protobuf:"bytes,2,opt,name=parent_blip_id,json=parentBlipId,proto3" json:"parent_blip_id,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	AuthorId      string                 `protobuf:"bytes,4,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,5,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Metadata      *BlipMetadata          `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	UserVote      *UserVoteStatus        `protobuf:"bytes,9,opt,name=user_vote,json=userVote,proto3,oneof" json:"user_vote,omitempty"` // Present if user is authenticated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_blip_blip_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{12}
}

func (x *Comment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Comment) GetParentBlipId() string {
	if x != nil {
		return x.ParentBlipId
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Comment) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

func (x *Comment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Comment) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Comment) GetMetadata() *BlipMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Comment) GetUserVote() *UserVoteStatus {
	if x != nil {
		return x.UserVote
	}
	return nil
}

type CreateCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentBlipId  string                 `protobuf:"bytes,1,opt,name=parent_blip_id,json=parentBlipId,proto3" json:"parent_blip_id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	AuthorId      string                 `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,4,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCommentRequest) Reset() {
	*x = CreateCommentRequest{}
	mi := &file_blip_blip_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentRequest) ProtoMessage() {}

func (x *CreateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentRequest.ProtoReflect.Descriptor instead.
func (*CreateCommentRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{13}
}

func (x *CreateCommentRequest) GetParentBlipId() string {
	if x != nil {
		return x.ParentBlipId
	}
	return ""
}

func (x *CreateCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateCommentRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *CreateCommentRequest) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

type CreateCommentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       *Comment               `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCommentResponse) Reset() {
	*x = CreateCommentResponse{}
	mi := &file_blip_blip_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentResponse) ProtoMessage() {}

func (x *CreateCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentResponse.ProtoReflect.Descriptor instead.
func (*CreateCommentResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{14}
}

func (x *CreateCommentResponse) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type DeleteCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // LUID
	AuthorId      string                 `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"` // For authorization
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCommentRequest) Reset() {
	*x = DeleteCommentRequest{}
	mi := &file_blip_blip_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentRequest) ProtoMessage() {}

func (x *DeleteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCommentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteCommentRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

type UpdateCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // LUID
	AuthorId      string                 `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"` // For authorization
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,4,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCommentRequest) Reset() {
	*x = UpdateCommentRequest{}
	mi := &file_blip_blip_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentRequest) ProtoMessage() {}

func (x *UpdateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentRequest.ProtoReflect.Descriptor instead.
func (*UpdateCommentRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateCommentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCommentRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *UpdateCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateCommentRequest) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

type UpdateCommentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       *Comment               `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCommentResponse) Reset() {
	*x = UpdateCommentResponse{}
	mi := &file_blip_blip_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentResponse) ProtoMessage() {}

func (x *UpdateCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentResponse.ProtoReflect.Descriptor instead.
func (*UpdateCommentResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateCommentResponse) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type GetCommentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ParentBlipId  string                 `protobuf:"bytes,1,opt,name=parent_blip_id,json=parentBlipId,proto3" json:"parent_blip_id,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     *string                `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentsRequest) Reset() {
	*x = GetCommentsRequest{}
	mi := &file_blip_blip_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsRequest) ProtoMessage() {}

func (x *GetCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsRequest.ProtoReflect.Descriptor instead.
func (*GetCommentsRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{18}
}

func (x *GetCommentsRequest) GetParentBlipId() string {
	if x != nil {
		return x.ParentBlipId
	}
	return ""
}

func (x *GetCommentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCommentsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetCommentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comments      []*Comment             `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalComments int64                  `protobuf:"varint,3,opt,name=total_comments,json=totalComments,proto3" json:"total_comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommentsResponse) Reset() {
	*x = GetCommentsResponse{}
	mi := &file_blip_blip_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsResponse) ProtoMessage() {}

func (x *GetCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsResponse.ProtoReflect.Descriptor instead.
func (*GetCommentsResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{19}
}

func (x *GetCommentsResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *GetCommentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetCommentsResponse) GetTotalComments() int64 {
	if x != nil {
		return x.TotalComments
	}
	return 0
}

type VoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetId      string                 `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetType    TargetType             `protobuf:"varint,2,opt,name=target_type,json=targetType,proto3,enum=blipper.blip.v1.TargetType" json:"target_type,omitempty"`
	VoteType      VoteType               `protobuf:"varint,3,opt,name=vote_type,json=voteType,proto3,enum=blipper.blip.v1.VoteType" json:"vote_type,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteRequest) Reset() {
	*x = VoteRequest{}
	mi := &file_blip_blip_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequest) ProtoMessage() {}

func (x *VoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequest.ProtoReflect.Descriptor instead.
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{20}
}

func (x *VoteRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *VoteRequest) GetTargetType() TargetType {
	if x != nil {
		return x.TargetType
	}
	return TargetType_TARGET_TYPE_UNSPECIFIED
}

func (x *VoteRequest) GetVoteType() VoteType {
	if x != nil {
		return x.VoteType
	}
	return VoteType_VOTE_TYPE_UNSPECIFIED
}

func (x *VoteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type VoteResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UpdatedMetadata *BlipMetadata          `protobuf:"bytes,1,opt,name=updated_metadata,json=updatedMetadata,proto3" json:"updated_metadata,omitempty"`
	UserVote        *UserVoteStatus        `protobuf:"bytes,2,opt,name=user_vote,json=userVote,proto3" json:"user_vote,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	mi := &file_blip_blip_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{21}
}

func (x *VoteResponse) GetUpdatedMetadata() *BlipMetadata {
	if x != nil {
		return x.UpdatedMetadata
	}
	return nil
}

func (x *VoteResponse) GetUserVote() *UserVoteStatus {
	if x != nil {
		return x.UserVote
	}
	return nil
}

type GetVoteStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetId      string                 `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetType    TargetType             `protobuf:"varint,2,opt,name=target_type,json=targetType,proto3,enum=blipper.blip.v1.TargetType" json:"target_type,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVoteStatusRequest) Reset() {
	*x = GetVoteStatusRequest{}
	mi := &file_blip_blip_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVoteStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoteStatusRequest) ProtoMessage() {}

func (x *GetVoteStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoteStatusRequest.ProtoReflect.Descriptor instead.
func (*GetVoteStatusRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{22}
}

func (x *GetVoteStatusRequest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *GetVoteStatusRequest) GetTargetType() TargetType {
	if x != nil {
		return x.TargetType
	}
	return TargetType_TARGET_TYPE_UNSPECIFIED
}

func (x *GetVoteStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetVoteStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserVote      *UserVoteStatus        `protobuf:"bytes,1,opt,name=user_vote,json=userVote,proto3" json:"user_vote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVoteStatusResponse) Reset() {
	*x = GetVoteStatusResponse{}
	mi := &file_blip_blip_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVoteStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoteStatusResponse) ProtoMessage() {}

func (x *GetVoteStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoteStatusResponse.ProtoReflect.Descriptor instead.
func (*GetVoteStatusResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{23}
}

func (x *GetVoteStatusResponse) GetUserVote() *UserVoteStatus {
	if x != nil {
		return x.UserVote
	}
	return nil
}

type GetCircleTimelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	PageSize      *int32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     *string                `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCircleTimelineRequest) Reset() {
	*x = GetCircleTimelineRequest{}
	mi := &file_blip_blip_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCircleTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircleTimelineRequest) ProtoMessage() {}

func (x *GetCircleTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircleTimelineRequest.ProtoReflect.Descriptor instead.
func (*GetCircleTimelineRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{24}
}

func (x *GetCircleTimelineRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *GetCircleTimelineRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *GetCircleTimelineRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetCircleTimelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blips         []*Blip                `protobuf:"bytes,1,rep,name=blips,proto3" json:"blips,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCircleTimelineResponse) Reset() {
	*x = GetCircleTimelineResponse{}
	mi := &file_blip_blip_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCircleTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircleTimelineResponse) ProtoMessage() {}

func (x *GetCircleTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircleTimelineResponse.ProtoReflect.Descriptor instead.
func (*GetCircleTimelineResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{25}
}

func (x *GetCircleTimelineResponse) GetBlips() []*Blip {
	if x != nil {
		return x.Blips
	}
	return nil
}

func (x *GetCircleTimelineResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetUserTimelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageSize      *int32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     *string                `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTimelineRequest) Reset() {
	*x = GetUserTimelineRequest{}
	mi := &file_blip_blip_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTimelineRequest) ProtoMessage() {}

func (x *GetUserTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTimelineRequest.ProtoReflect.Descriptor instead.
func (*GetUserTimelineRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{26}
}

func (x *GetUserTimelineRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserTimelineRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *GetUserTimelineRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetUserTimelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blips         []*Blip                `protobuf:"bytes,1,rep,name=blips,proto3" json:"blips,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserTimelineResponse) Reset() {
	*x = GetUserTimelineResponse{}
	mi := &file_blip_blip_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTimelineResponse) ProtoMessage() {}

func (x *GetUserTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTimelineResponse.ProtoReflect.Descriptor instead.
func (*GetUserTimelineResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{27}
}

func (x *GetUserTimelineResponse) GetBlips() []*Blip {
	if x != nil {
		return x.Blips
	}
	return nil
}

func (x *GetUserTimelineResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetTrendingFeedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageSize      *int32                 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     *string                `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrendingFeedRequest) Reset() {
	*x = GetTrendingFeedRequest{}
	mi := &file_blip_blip_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrendingFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrendingFeedRequest) ProtoMessage() {}

func (x *GetTrendingFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrendingFeedRequest.ProtoReflect.Descriptor instead.
func (*GetTrendingFeedRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{28}
}

func (x *GetTrendingFeedRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *GetTrendingFeedRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetTrendingFeedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blips         []*Blip                `protobuf:"bytes,1,rep,name=blips,proto3" json:"blips,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTrendingFeedResponse) Reset() {
	*x = GetTrendingFeedResponse{}
	mi := &file_blip_blip_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTrendingFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrendingFeedResponse) ProtoMessage() {}

func (x *GetTrendingFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrendingFeedResponse.ProtoReflect.Descriptor instead.
func (*GetTrendingFeedResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{29}
}

func (x *GetTrendingFeedResponse) GetBlips() []*Blip {
	if x != nil {
		return x.Blips
	}
	return nil
}

func (x *GetTrendingFeedResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetPopularFeedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	PageSize      *int32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     *string                `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPopularFeedRequest) Reset() {
	*x = GetPopularFeedRequest{}
	mi := &file_blip_blip_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPopularFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopularFeedRequest) ProtoMessage() {}

func (x *GetPopularFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopularFeedRequest.ProtoReflect.Descriptor instead.
func (*GetPopularFeedRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{30}
}

func (x *GetPopularFeedRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *GetPopularFeedRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *GetPopularFeedRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetPopularFeedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blips         []*Blip                `protobuf:"bytes,1,rep,name=blips,proto3" json:"blips,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPopularFeedResponse) Reset() {
	*x = GetPopularFeedResponse{}
	mi := &file_blip_blip_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPopularFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPopularFeedResponse) ProtoMessage() {}

func (x *GetPopularFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPopularFeedResponse.ProtoReflect.Descriptor instead.
func (*GetPopularFeedResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{31}
}

func (x *GetPopularFeedResponse) GetBlips() []*Blip {
	if x != nil {
		return x.Blips
	}
	return nil
}

func (x *GetPopularFeedResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UserVoteStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoteType      VoteType               `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3,enum=blipper.blip.v1.VoteType" json:"vote_type,omitempty"`
	VotedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=voted_at,json=votedAt,proto3" json:"voted_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserVoteStatus) Reset() {
	*x = UserVoteStatus{}
	mi := &file_blip_blip_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserVoteStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVoteStatus) ProtoMessage() {}

func (x *UserVoteStatus) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVoteStatus.ProtoReflect.Descriptor instead.
func (*UserVoteStatus) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{32}
}

func (x *UserVoteStatus) GetVoteType() VoteType {
	if x != nil {
		return x.VoteType
	}
	return VoteType_VOTE_TYPE_UNSPECIFIED
}

func (x *UserVoteStatus) GetVotedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VotedAt
	}
	return nil
}

var File_blip_blip_proto protoreflect.FileDescriptor

var file_blip_blip_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6c, 0x69, 0x70, 0x2f, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb6, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x62,
	0x6c, 0x69, 0x70, 0x5f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x62, 0x6c, 0x69, 0x70, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x62, 0x6c, 0x69, 0x70, 0x5f, 0x6f, 0x66, 0x22, 0x3f, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x68, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x70,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x40, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x79, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x3f, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x22, 0xf8, 0x01,
	0x0a, 0x0c, 0x42, 0x6c, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x6f, 0x77,
	0x6e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x62, 0x6c, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x62, 0x6c, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x04, 0x42, 0x6c, 0x69,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x62, 0x6c, 0x69, 0x70, 0x5f, 0x6f,
	0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x62, 0x6c, 0x69,
	0x70, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72,
	0x65, 0x62, 0x6c, 0x69, 0x70, 0x5f, 0x6f, 0x66, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x69,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x70, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x43, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x9a, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb9, 0x01, 0x0a,
	0x0b, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x56, 0x6f, 0x74, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x70, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x05, 0x62, 0x6c,
	0x69, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x70, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x62, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x69, 0x70, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7f, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x76,
	0x6f, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x2a, 0x53, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4f, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4c, 0x49, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x32, 0xde, 0x0a, 0x0a, 0x0b, 0x42, 0x6c, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x12,
	0x22, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x69, 0x70, 0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c,
	0x69, 0x70, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x69,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x12,
	0x22, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x12, 0x27, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x65, 0x65,
	0x64, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x23, 0x5a, 0x05, 0x2f, 0x62, 0x6c, 0x69, 0x70, 0xaa, 0x02, 0x19, 0x42, 0x6c,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x69, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blip_blip_proto_rawDescOnce sync.Once
	file_blip_blip_proto_rawDescData = file_blip_blip_proto_rawDesc
)

func file_blip_blip_proto_rawDescGZIP() []byte {
	file_blip_blip_proto_rawDescOnce.Do(func() {
		file_blip_blip_proto_rawDescData = protoimpl.X.CompressGZIP(file_blip_blip_proto_rawDescData)
	})
	return file_blip_blip_proto_rawDescData
}

var file_blip_blip_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_blip_blip_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_blip_blip_proto_goTypes = []any{
	(VoteType)(0),                     // 0: blipper.blip.v1.VoteType
	(TargetType)(0),                   // 1: blipper.blip.v1.TargetType
	(*CreateBlipRequest)(nil),         // 2: blipper.blip.v1.CreateBlipRequest
	(*CreateBlipResponse)(nil),        // 3: blipper.blip.v1.CreateBlipResponse
	(*GetBlipRequest)(nil),            // 4: blipper.blip.v1.GetBlipRequest
	(*GetBlipResponse)(nil),           // 5: blipper.blip.v1.GetBlipResponse
	(*ListBlipsRequest)(nil),          // 6: blipper.blip.v1.ListBlipsRequest
	(*ListBlipsResponse)(nil),         // 7: blipper.blip.v1.ListBlipsResponse
	(*DeleteBlipRequest)(nil),         // 8: blipper.blip.v1.DeleteBlipRequest
	(*DeleteBlipResponse)(nil),        // 9: blipper.blip.v1.DeleteBlipResponse
	(*UpdateBlipRequest)(nil),         // 10: blipper.blip.v1.UpdateBlipRequest
	(*UpdateBlipResponse)(nil),        // 11: blipper.blip.v1.UpdateBlipResponse
	(*BlipMetadata)(nil),              // 12: blipper.blip.v1.BlipMetadata
	(*Blip)(nil),                      // 13: blipper.blip.v1.Blip
	(*Comment)(nil),                   // 14: blipper.blip.v1.Comment
	(*CreateCommentRequest)(nil),      // 15: blipper.blip.v1.CreateCommentRequest
	(*CreateCommentResponse)(nil),     // 16: blipper.blip.v1.CreateCommentResponse
	(*DeleteCommentRequest)(nil),      // 17: blipper.blip.v1.DeleteCommentRequest
	(*UpdateCommentRequest)(nil),      // 18: blipper.blip.v1.UpdateCommentRequest
	(*UpdateCommentResponse)(nil),     // 19: blipper.blip.v1.UpdateCommentResponse
	(*GetCommentsRequest)(nil),        // 20: blipper.blip.v1.GetCommentsRequest
	(*GetCommentsResponse)(nil),       // 21: blipper.blip.v1.GetCommentsResponse
	(*VoteRequest)(nil),               // 22: blipper.blip.v1.VoteRequest
	(*VoteResponse)(nil),              // 23: blipper.blip.v1.VoteResponse
	(*GetVoteStatusRequest)(nil),      // 24: blipper.blip.v1.GetVoteStatusRequest
	(*GetVoteStatusResponse)(nil),     // 25: blipper.blip.v1.GetVoteStatusResponse
	(*GetCircleTimelineRequest)(nil),  // 26: blipper.blip.v1.GetCircleTimelineRequest
	(*GetCircleTimelineResponse)(nil), // 27: blipper.blip.v1.GetCircleTimelineResponse
	(*GetUserTimelineRequest)(nil),    // 28: blipper.blip.v1.GetUserTimelineRequest
	(*GetUserTimelineResponse)(nil),   // 29: blipper.blip.v1.GetUserTimelineResponse
	(*GetTrendingFeedRequest)(nil),    // 30: blipper.blip.v1.GetTrendingFeedRequest
	(*GetTrendingFeedResponse)(nil),   // 31: blipper.blip.v1.GetTrendingFeedResponse
	(*GetPopularFeedRequest)(nil),     // 32: blipper.blip.v1.GetPopularFeedRequest
	(*GetPopularFeedResponse)(nil),    // 33: blipper.blip.v1.GetPopularFeedResponse
	(*UserVoteStatus)(nil),            // 34: blipper.blip.v1.UserVoteStatus
	(*timestamppb.Timestamp)(nil),     // 35: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),             // 36: google.protobuf.Empty
}
var file_blip_blip_proto_depIdxs = []int32{
	13, // 0: blipper.blip.v1.CreateBlipResponse.blip:type_name -> blipper.blip.v1.Blip
	13, // 1: blipper.blip.v1.GetBlipResponse.blip:type_name -> blipper.blip.v1.Blip
	13, // 2: blipper.blip.v1.ListBlipsResponse.blips:type_name -> blipper.blip.v1.Blip
	13, // 3: blipper.blip.v1.UpdateBlipResponse.blip:type_name -> blipper.blip.v1.Blip
	35, // 4: blipper.blip.v1.BlipMetadata.last_activity:type_name -> google.protobuf.Timestamp
	35, // 5: blipper.blip.v1.Blip.created_at:type_name -> google.protobuf.Timestamp
	35, // 6: blipper.blip.v1.Blip.updated_at:type_name -> google.protobuf.Timestamp
	12, // 7: blipper.blip.v1.Blip.metadata:type_name -> blipper.blip.v1.BlipMetadata
	34, // 8: blipper.blip.v1.Blip.user_vote:type_name -> blipper.blip.v1.UserVoteStatus
	35, // 9: blipper.blip.v1.Comment.created_at:type_name -> google.protobuf.Timestamp
	35, // 10: blipper.blip.v1.Comment.updated_at:type_name -> google.protobuf.Timestamp
	12, // 11: blipper.blip.v1.Comment.metadata:type_name -> blipper.blip.v1.BlipMetadata
	34, // 12: blipper.blip.v1.Comment.user_vote:type_name -> blipper.blip.v1.UserVoteStatus
	14, // 13: blipper.blip.v1.CreateCommentResponse.comment:type_name -> blipper.blip.v1.Comment
	14, // 14: blipper.blip.v1.UpdateCommentResponse.comment:type_name -> blipper.blip.v1.Comment
	14, // 15: blipper.blip.v1.GetCommentsResponse.comments:type_name -> blipper.blip.v1.Comment
	1,  // 16: blipper.blip.v1.VoteRequest.target_type:type_name -> blipper.blip.v1.TargetType
	0,  // 17: blipper.blip.v1.VoteRequest.vote_type:type_name -> blipper.blip.v1.VoteType
	12, // 18: blipper.blip.v1.VoteResponse.updated_metadata:type_name -> blipper.blip.v1.BlipMetadata
	34, // 19: blipper.blip.v1.VoteResponse.user_vote:type_name -> blipper.blip.v1.UserVoteStatus
	1,  // 20: blipper.blip.v1.GetVoteStatusRequest.target_type:type_name -> blipper.blip.v1.TargetType
	34, // 21: blipper.blip.v1.GetVoteStatusResponse.user_vote:type_name -> blipper.blip.v1.UserVoteStatus
	13, // 22: blipper.blip.v1.GetCircleTimelineResponse.blips:type_name -> blipper.blip.v1.Blip
	13, // 23: blipper.blip.v1.GetUserTimelineResponse.blips:type_name -> blipper.blip.v1.Blip
	13, // 24: blipper.blip.v1.GetTrendingFeedResponse.blips:type_name -> blipper.blip.v1.Blip
	13, // 25: blipper.blip.v1.GetPopularFeedResponse.blips:type_name -> blipper.blip.v1.Blip
	0,  // 26: blipper.blip.v1.UserVoteStatus.vote_type:type_name -> blipper.blip.v1.VoteType
	35, // 27: blipper.blip.v1.UserVoteStatus.voted_at:type_name -> google.protobuf.Timestamp
	2,  // 28: blipper.blip.v1.BlipService.CreateBlip:input_type -> blipper.blip.v1.CreateBlipRequest
	4,  // 29: blipper.blip.v1.BlipService.GetBlip:input_type -> blipper.blip.v1.GetBlipRequest
	6,  // 30: blipper.blip.v1.BlipService.ListBlips:input_type -> blipper.blip.v1.ListBlipsRequest
	8,  // 31: blipper.blip.v1.BlipService.DeleteBlip:input_type -> blipper.blip.v1.DeleteBlipRequest
	10, // 32: blipper.blip.v1.BlipService.UpdateBlip:input_type -> blipper.blip.v1.UpdateBlipRequest
	15, // 33: blipper.blip.v1.BlipService.CreateComment:input_type -> blipper.blip.v1.CreateCommentRequest
	20, // 34: blipper.blip.v1.BlipService.GetComments:input_type -> blipper.blip.v1.GetCommentsRequest
	18, // 35: blipper.blip.v1.BlipService.UpdateComment:input_type -> blipper.blip.v1.UpdateCommentRequest
	17, // 36: blipper.blip.v1.BlipService.DeleteComment:input_type -> blipper.blip.v1.DeleteCommentRequest
	22, // 37: blipper.blip.v1.BlipService.Vote:input_type -> blipper.blip.v1.VoteRequest
	24, // 38: blipper.blip.v1.BlipService.GetVoteStatus:input_type -> blipper.blip.v1.GetVoteStatusRequest
	26, // 39: blipper.blip.v1.BlipService.GetCircleTimeline:input_type -> blipper.blip.v1.GetCircleTimelineRequest
	28, // 40: blipper.blip.v1.BlipService.GetUserTimeline:input_type -> blipper.blip.v1.GetUserTimelineRequest
	30, // 41: blipper.blip.v1.BlipService.GetTrendingFeed:input_type -> blipper.blip.v1.GetTrendingFeedRequest
	32, // 42: blipper.blip.v1.BlipService.GetPopularFeed:input_type -> blipper.blip.v1.GetPopularFeedRequest
	3,  // 43: blipper.blip.v1.BlipService.CreateBlip:output_type -> blipper.blip.v1.CreateBlipResponse
	5,  // 44: blipper.blip.v1.BlipService.GetBlip:output_type -> blipper.blip.v1.GetBlipResponse
	7,  // 45: blipper.blip.v1.BlipService.ListBlips:output_type -> blipper.blip.v1.ListBlipsResponse
	9,  // 46: blipper.blip.v1.BlipService.DeleteBlip:output_type -> blipper.blip.v1.DeleteBlipResponse
	11, // 47: blipper.blip.v1.BlipService.UpdateBlip:output_type -> blipper.blip.v1.UpdateBlipResponse
	16, // 48: blipper.blip.v1.BlipService.CreateComment:output_type -> blipper.blip.v1.CreateCommentResponse
	21, // 49: blipper.blip.v1.BlipService.GetComments:output_type -> blipper.blip.v1.GetCommentsResponse
	19, // 50: blipper.blip.v1.BlipService.UpdateComment:output_type -> blipper.blip.v1.UpdateCommentResponse
	36, // 51: blipper.blip.v1.BlipService.DeleteComment:output_type -> google.protobuf.Empty
	23, // 52: blipper.blip.v1.BlipService.Vote:output_type -> blipper.blip.v1.VoteResponse
	25, // 53: blipper.blip.v1.BlipService.GetVoteStatus:output_type -> blipper.blip.v1.GetVoteStatusResponse
	27, // 54: blipper.blip.v1.BlipService.GetCircleTimeline:output_type -> blipper.blip.v1.GetCircleTimelineResponse
	29, // 55: blipper.blip.v1.BlipService.GetUserTimeline:output_type -> blipper.blip.v1.GetUserTimelineResponse
	31, // 56: blipper.blip.v1.BlipService.GetTrendingFeed:output_type -> blipper.blip.v1.GetTrendingFeedResponse
	33, // 57: blipper.blip.v1.BlipService.GetPopularFeed:output_type -> blipper.blip.v1.GetPopularFeedResponse
	43, // [43:58] is the sub-list for method output_type
	28, // [28:43] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_blip_blip_proto_init() }
func file_blip_blip_proto_init() {
	if File_blip_blip_proto != nil {
		return
	}
	file_blip_blip_proto_msgTypes[0].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[4].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[11].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[12].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[18].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[24].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[26].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[28].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[30].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blip_blip_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blip_blip_proto_goTypes,
		DependencyIndexes: file_blip_blip_proto_depIdxs,
		EnumInfos:         file_blip_blip_proto_enumTypes,
		MessageInfos:      file_blip_blip_proto_msgTypes,
	}.Build()
	File_blip_blip_proto = out.File
	file_blip_blip_proto_rawDesc = nil
	file_blip_blip_proto_goTypes = nil
	file_blip_blip_proto_depIdxs = nil
}
