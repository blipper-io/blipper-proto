// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.2
// source: blip/blip.proto

package blip

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Blip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	AuthorId      string                 `protobuf:"bytes,3,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,4,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,5,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ParentId      *string                `protobuf:"bytes,8,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`               // For replies
	SharedFromId  *string                `protobuf:"bytes,9,opt,name=shared_from_id,json=sharedFromId,proto3,oneof" json:"shared_from_id,omitempty"` // For shared blips
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Blip) Reset() {
	*x = Blip{}
	mi := &file_blip_blip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blip) ProtoMessage() {}

func (x *Blip) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blip.ProtoReflect.Descriptor instead.
func (*Blip) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{0}
}

func (x *Blip) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Blip) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Blip) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *Blip) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *Blip) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

func (x *Blip) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Blip) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Blip) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Blip) GetSharedFromId() string {
	if x != nil && x.SharedFromId != nil {
		return *x.SharedFromId
	}
	return ""
}

type CreateBlipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	AuthorId      string                 `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,3,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,4,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	ParentId      *string                `protobuf:"bytes,5,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SharedFromId  *string                `protobuf:"bytes,6,opt,name=shared_from_id,json=sharedFromId,proto3,oneof" json:"shared_from_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlipRequest) Reset() {
	*x = CreateBlipRequest{}
	mi := &file_blip_blip_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlipRequest) ProtoMessage() {}

func (x *CreateBlipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlipRequest.ProtoReflect.Descriptor instead.
func (*CreateBlipRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBlipRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateBlipRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *CreateBlipRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *CreateBlipRequest) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

func (x *CreateBlipRequest) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *CreateBlipRequest) GetSharedFromId() string {
	if x != nil && x.SharedFromId != nil {
		return *x.SharedFromId
	}
	return ""
}

type CreateBlipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blip          *Blip                  `protobuf:"bytes,1,opt,name=blip,proto3" json:"blip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBlipResponse) Reset() {
	*x = CreateBlipResponse{}
	mi := &file_blip_blip_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBlipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlipResponse) ProtoMessage() {}

func (x *CreateBlipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlipResponse.ProtoReflect.Descriptor instead.
func (*CreateBlipResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBlipResponse) GetBlip() *Blip {
	if x != nil {
		return x.Blip
	}
	return nil
}

type GetBlipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlipRequest) Reset() {
	*x = GetBlipRequest{}
	mi := &file_blip_blip_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlipRequest) ProtoMessage() {}

func (x *GetBlipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlipRequest.ProtoReflect.Descriptor instead.
func (*GetBlipRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{3}
}

func (x *GetBlipRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBlipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blip          *Blip                  `protobuf:"bytes,1,opt,name=blip,proto3" json:"blip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlipResponse) Reset() {
	*x = GetBlipResponse{}
	mi := &file_blip_blip_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlipResponse) ProtoMessage() {}

func (x *GetBlipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlipResponse.ProtoReflect.Descriptor instead.
func (*GetBlipResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{4}
}

func (x *GetBlipResponse) GetBlip() *Blip {
	if x != nil {
		return x.Blip
	}
	return nil
}

type ListBlipsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	AuthorId      *string                `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3,oneof" json:"author_id,omitempty"`
	PageSize      *int32                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	PageToken     *string                `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBlipsRequest) Reset() {
	*x = ListBlipsRequest{}
	mi := &file_blip_blip_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlipsRequest) ProtoMessage() {}

func (x *ListBlipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlipsRequest.ProtoReflect.Descriptor instead.
func (*ListBlipsRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{5}
}

func (x *ListBlipsRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *ListBlipsRequest) GetAuthorId() string {
	if x != nil && x.AuthorId != nil {
		return *x.AuthorId
	}
	return ""
}

func (x *ListBlipsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListBlipsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ListBlipsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blips         []*Blip                `protobuf:"bytes,1,rep,name=blips,proto3" json:"blips,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBlipsResponse) Reset() {
	*x = ListBlipsResponse{}
	mi := &file_blip_blip_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlipsResponse) ProtoMessage() {}

func (x *ListBlipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlipsResponse.ProtoReflect.Descriptor instead.
func (*ListBlipsResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{6}
}

func (x *ListBlipsResponse) GetBlips() []*Blip {
	if x != nil {
		return x.Blips
	}
	return nil
}

func (x *ListBlipsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteBlipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthorId      string                 `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"` // For authorization
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBlipRequest) Reset() {
	*x = DeleteBlipRequest{}
	mi := &file_blip_blip_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBlipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlipRequest) ProtoMessage() {}

func (x *DeleteBlipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlipRequest.ProtoReflect.Descriptor instead.
func (*DeleteBlipRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteBlipRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteBlipRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

type DeleteBlipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBlipResponse) Reset() {
	*x = DeleteBlipResponse{}
	mi := &file_blip_blip_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBlipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlipResponse) ProtoMessage() {}

func (x *DeleteBlipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlipResponse.ProtoReflect.Descriptor instead.
func (*DeleteBlipResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{8}
}

type UpdateBlipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AuthorId      string                 `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"` // For authorization
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	MediaUrls     []string               `protobuf:"bytes,4,rep,name=media_urls,json=mediaUrls,proto3" json:"media_urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBlipRequest) Reset() {
	*x = UpdateBlipRequest{}
	mi := &file_blip_blip_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBlipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlipRequest) ProtoMessage() {}

func (x *UpdateBlipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlipRequest.ProtoReflect.Descriptor instead.
func (*UpdateBlipRequest) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateBlipRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBlipRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *UpdateBlipRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateBlipRequest) GetMediaUrls() []string {
	if x != nil {
		return x.MediaUrls
	}
	return nil
}

type UpdateBlipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blip          *Blip                  `protobuf:"bytes,1,opt,name=blip,proto3" json:"blip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBlipResponse) Reset() {
	*x = UpdateBlipResponse{}
	mi := &file_blip_blip_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBlipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlipResponse) ProtoMessage() {}

func (x *UpdateBlipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blip_blip_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlipResponse.ProtoReflect.Descriptor instead.
func (*UpdateBlipResponse) Descriptor() ([]byte, []int) {
	return file_blip_blip_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateBlipResponse) GetBlip() *Blip {
	if x != nil {
		return x.Blip
	}
	return nil
}

var File_blip_blip_proto protoreflect.FileDescriptor

var file_blip_blip_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x6c, 0x69, 0x70, 0x2f, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x04, 0x42, 0x6c, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x22, 0x20, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x22, 0xc2, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x68, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x05, 0x62, 0x6c, 0x69,
	0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x40, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x79, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x3f, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x04, 0x62, 0x6c, 0x69, 0x70, 0x32, 0xb4,
	0x03, 0x0a, 0x0b, 0x42, 0x6c, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x12, 0x22, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x70,
	0x12, 0x1f, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x73,
	0x12, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6c, 0x69, 0x70, 0x12, 0x22, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x12, 0x22, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x05, 0x2f, 0x62, 0x6c, 0x69, 0x70, 0xaa, 0x02,
	0x19, 0x42, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6c, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_blip_blip_proto_rawDescOnce sync.Once
	file_blip_blip_proto_rawDescData = file_blip_blip_proto_rawDesc
)

func file_blip_blip_proto_rawDescGZIP() []byte {
	file_blip_blip_proto_rawDescOnce.Do(func() {
		file_blip_blip_proto_rawDescData = protoimpl.X.CompressGZIP(file_blip_blip_proto_rawDescData)
	})
	return file_blip_blip_proto_rawDescData
}

var file_blip_blip_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_blip_blip_proto_goTypes = []any{
	(*Blip)(nil),                  // 0: blipper.blip.v1.Blip
	(*CreateBlipRequest)(nil),     // 1: blipper.blip.v1.CreateBlipRequest
	(*CreateBlipResponse)(nil),    // 2: blipper.blip.v1.CreateBlipResponse
	(*GetBlipRequest)(nil),        // 3: blipper.blip.v1.GetBlipRequest
	(*GetBlipResponse)(nil),       // 4: blipper.blip.v1.GetBlipResponse
	(*ListBlipsRequest)(nil),      // 5: blipper.blip.v1.ListBlipsRequest
	(*ListBlipsResponse)(nil),     // 6: blipper.blip.v1.ListBlipsResponse
	(*DeleteBlipRequest)(nil),     // 7: blipper.blip.v1.DeleteBlipRequest
	(*DeleteBlipResponse)(nil),    // 8: blipper.blip.v1.DeleteBlipResponse
	(*UpdateBlipRequest)(nil),     // 9: blipper.blip.v1.UpdateBlipRequest
	(*UpdateBlipResponse)(nil),    // 10: blipper.blip.v1.UpdateBlipResponse
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_blip_blip_proto_depIdxs = []int32{
	11, // 0: blipper.blip.v1.Blip.created_at:type_name -> google.protobuf.Timestamp
	11, // 1: blipper.blip.v1.Blip.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: blipper.blip.v1.CreateBlipResponse.blip:type_name -> blipper.blip.v1.Blip
	0,  // 3: blipper.blip.v1.GetBlipResponse.blip:type_name -> blipper.blip.v1.Blip
	0,  // 4: blipper.blip.v1.ListBlipsResponse.blips:type_name -> blipper.blip.v1.Blip
	0,  // 5: blipper.blip.v1.UpdateBlipResponse.blip:type_name -> blipper.blip.v1.Blip
	1,  // 6: blipper.blip.v1.BlipService.CreateBlip:input_type -> blipper.blip.v1.CreateBlipRequest
	3,  // 7: blipper.blip.v1.BlipService.GetBlip:input_type -> blipper.blip.v1.GetBlipRequest
	5,  // 8: blipper.blip.v1.BlipService.ListBlips:input_type -> blipper.blip.v1.ListBlipsRequest
	7,  // 9: blipper.blip.v1.BlipService.DeleteBlip:input_type -> blipper.blip.v1.DeleteBlipRequest
	9,  // 10: blipper.blip.v1.BlipService.UpdateBlip:input_type -> blipper.blip.v1.UpdateBlipRequest
	2,  // 11: blipper.blip.v1.BlipService.CreateBlip:output_type -> blipper.blip.v1.CreateBlipResponse
	4,  // 12: blipper.blip.v1.BlipService.GetBlip:output_type -> blipper.blip.v1.GetBlipResponse
	6,  // 13: blipper.blip.v1.BlipService.ListBlips:output_type -> blipper.blip.v1.ListBlipsResponse
	8,  // 14: blipper.blip.v1.BlipService.DeleteBlip:output_type -> blipper.blip.v1.DeleteBlipResponse
	10, // 15: blipper.blip.v1.BlipService.UpdateBlip:output_type -> blipper.blip.v1.UpdateBlipResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_blip_blip_proto_init() }
func file_blip_blip_proto_init() {
	if File_blip_blip_proto != nil {
		return
	}
	file_blip_blip_proto_msgTypes[0].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[1].OneofWrappers = []any{}
	file_blip_blip_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blip_blip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blip_blip_proto_goTypes,
		DependencyIndexes: file_blip_blip_proto_depIdxs,
		MessageInfos:      file_blip_blip_proto_msgTypes,
	}.Build()
	File_blip_blip_proto = out.File
	file_blip_blip_proto_rawDesc = nil
	file_blip_blip_proto_goTypes = nil
	file_blip_blip_proto_depIdxs = nil
}
