// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: blip/blip.proto

package blip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlipService_CreateBlip_FullMethodName = "/blipper.blip.v1.BlipService/CreateBlip"
	BlipService_GetBlip_FullMethodName    = "/blipper.blip.v1.BlipService/GetBlip"
	BlipService_ListBlips_FullMethodName  = "/blipper.blip.v1.BlipService/ListBlips"
	BlipService_DeleteBlip_FullMethodName = "/blipper.blip.v1.BlipService/DeleteBlip"
	BlipService_UpdateBlip_FullMethodName = "/blipper.blip.v1.BlipService/UpdateBlip"
)

// BlipServiceClient is the client API for BlipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlipServiceClient interface {
	CreateBlip(ctx context.Context, in *CreateBlipRequest, opts ...grpc.CallOption) (*CreateBlipResponse, error)
	GetBlip(ctx context.Context, in *GetBlipRequest, opts ...grpc.CallOption) (*GetBlipResponse, error)
	ListBlips(ctx context.Context, in *ListBlipsRequest, opts ...grpc.CallOption) (*ListBlipsResponse, error)
	DeleteBlip(ctx context.Context, in *DeleteBlipRequest, opts ...grpc.CallOption) (*DeleteBlipResponse, error)
	UpdateBlip(ctx context.Context, in *UpdateBlipRequest, opts ...grpc.CallOption) (*UpdateBlipResponse, error)
}

type blipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlipServiceClient(cc grpc.ClientConnInterface) BlipServiceClient {
	return &blipServiceClient{cc}
}

func (c *blipServiceClient) CreateBlip(ctx context.Context, in *CreateBlipRequest, opts ...grpc.CallOption) (*CreateBlipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlipResponse)
	err := c.cc.Invoke(ctx, BlipService_CreateBlip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blipServiceClient) GetBlip(ctx context.Context, in *GetBlipRequest, opts ...grpc.CallOption) (*GetBlipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlipResponse)
	err := c.cc.Invoke(ctx, BlipService_GetBlip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blipServiceClient) ListBlips(ctx context.Context, in *ListBlipsRequest, opts ...grpc.CallOption) (*ListBlipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlipsResponse)
	err := c.cc.Invoke(ctx, BlipService_ListBlips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blipServiceClient) DeleteBlip(ctx context.Context, in *DeleteBlipRequest, opts ...grpc.CallOption) (*DeleteBlipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlipResponse)
	err := c.cc.Invoke(ctx, BlipService_DeleteBlip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blipServiceClient) UpdateBlip(ctx context.Context, in *UpdateBlipRequest, opts ...grpc.CallOption) (*UpdateBlipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBlipResponse)
	err := c.cc.Invoke(ctx, BlipService_UpdateBlip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlipServiceServer is the server API for BlipService service.
// All implementations must embed UnimplementedBlipServiceServer
// for forward compatibility.
type BlipServiceServer interface {
	CreateBlip(context.Context, *CreateBlipRequest) (*CreateBlipResponse, error)
	GetBlip(context.Context, *GetBlipRequest) (*GetBlipResponse, error)
	ListBlips(context.Context, *ListBlipsRequest) (*ListBlipsResponse, error)
	DeleteBlip(context.Context, *DeleteBlipRequest) (*DeleteBlipResponse, error)
	UpdateBlip(context.Context, *UpdateBlipRequest) (*UpdateBlipResponse, error)
	mustEmbedUnimplementedBlipServiceServer()
}

// UnimplementedBlipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlipServiceServer struct{}

func (UnimplementedBlipServiceServer) CreateBlip(context.Context, *CreateBlipRequest) (*CreateBlipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlip not implemented")
}
func (UnimplementedBlipServiceServer) GetBlip(context.Context, *GetBlipRequest) (*GetBlipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlip not implemented")
}
func (UnimplementedBlipServiceServer) ListBlips(context.Context, *ListBlipsRequest) (*ListBlipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlips not implemented")
}
func (UnimplementedBlipServiceServer) DeleteBlip(context.Context, *DeleteBlipRequest) (*DeleteBlipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlip not implemented")
}
func (UnimplementedBlipServiceServer) UpdateBlip(context.Context, *UpdateBlipRequest) (*UpdateBlipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlip not implemented")
}
func (UnimplementedBlipServiceServer) mustEmbedUnimplementedBlipServiceServer() {}
func (UnimplementedBlipServiceServer) testEmbeddedByValue()                     {}

// UnsafeBlipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlipServiceServer will
// result in compilation errors.
type UnsafeBlipServiceServer interface {
	mustEmbedUnimplementedBlipServiceServer()
}

func RegisterBlipServiceServer(s grpc.ServiceRegistrar, srv BlipServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlipService_ServiceDesc, srv)
}

func _BlipService_CreateBlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlipServiceServer).CreateBlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlipService_CreateBlip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlipServiceServer).CreateBlip(ctx, req.(*CreateBlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlipService_GetBlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlipServiceServer).GetBlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlipService_GetBlip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlipServiceServer).GetBlip(ctx, req.(*GetBlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlipService_ListBlips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlipServiceServer).ListBlips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlipService_ListBlips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlipServiceServer).ListBlips(ctx, req.(*ListBlipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlipService_DeleteBlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlipServiceServer).DeleteBlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlipService_DeleteBlip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlipServiceServer).DeleteBlip(ctx, req.(*DeleteBlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlipService_UpdateBlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlipServiceServer).UpdateBlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlipService_UpdateBlip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlipServiceServer).UpdateBlip(ctx, req.(*UpdateBlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlipService_ServiceDesc is the grpc.ServiceDesc for BlipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blipper.blip.v1.BlipService",
	HandlerType: (*BlipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlip",
			Handler:    _BlipService_CreateBlip_Handler,
		},
		{
			MethodName: "GetBlip",
			Handler:    _BlipService_GetBlip_Handler,
		},
		{
			MethodName: "ListBlips",
			Handler:    _BlipService_ListBlips_Handler,
		},
		{
			MethodName: "DeleteBlip",
			Handler:    _BlipService_DeleteBlip_Handler,
		},
		{
			MethodName: "UpdateBlip",
			Handler:    _BlipService_UpdateBlip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blip/blip.proto",
}
