// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.2
// source: circle/circle.proto

package circle

import (
	shared "github.com/blipper-io/blipper-proto/gen/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsPrivate     bool                   `protobuf:"varint,3,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	CreatorId     string                 `protobuf:"bytes,4,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCircleRequest) Reset() {
	*x = CreateCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCircleRequest) ProtoMessage() {}

func (x *CreateCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCircleRequest.ProtoReflect.Descriptor instead.
func (*CreateCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCircleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCircleRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCircleRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *CreateCircleRequest) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

type GetCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCircleRequest) Reset() {
	*x = GetCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircleRequest) ProtoMessage() {}

func (x *GetCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircleRequest.ProtoReflect.Descriptor instead.
func (*GetCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{1}
}

func (x *GetCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type ListCirclesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCirclesRequest) Reset() {
	*x = ListCirclesRequest{}
	mi := &file_circle_circle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCirclesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCirclesRequest) ProtoMessage() {}

func (x *ListCirclesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCirclesRequest.ProtoReflect.Descriptor instead.
func (*ListCirclesRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{2}
}

func (x *ListCirclesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCirclesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListCirclesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Circles       []*shared.Circle       `protobuf:"bytes,1,rep,name=circles,proto3" json:"circles,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCirclesResponse) Reset() {
	*x = ListCirclesResponse{}
	mi := &file_circle_circle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCirclesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCirclesResponse) ProtoMessage() {}

func (x *ListCirclesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCirclesResponse.ProtoReflect.Descriptor instead.
func (*ListCirclesResponse) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{3}
}

func (x *ListCirclesResponse) GetCircles() []*shared.Circle {
	if x != nil {
		return x.Circles
	}
	return nil
}

func (x *ListCirclesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	IsPrivate     *bool                  `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3,oneof" json:"is_private,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCircleRequest) Reset() {
	*x = UpdateCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCircleRequest) ProtoMessage() {}

func (x *UpdateCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCircleRequest.ProtoReflect.Descriptor instead.
func (*UpdateCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *UpdateCircleRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateCircleRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateCircleRequest) GetIsPrivate() bool {
	if x != nil && x.IsPrivate != nil {
		return *x.IsPrivate
	}
	return false
}

type DeleteCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCircleRequest) Reset() {
	*x = DeleteCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCircleRequest) ProtoMessage() {}

func (x *DeleteCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCircleRequest.ProtoReflect.Descriptor instead.
func (*DeleteCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type JoinCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,2,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinCircleRequest) Reset() {
	*x = JoinCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCircleRequest) ProtoMessage() {}

func (x *JoinCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCircleRequest.ProtoReflect.Descriptor instead.
func (*JoinCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{6}
}

func (x *JoinCircleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type LeaveCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,2,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveCircleRequest) Reset() {
	*x = LeaveCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveCircleRequest) ProtoMessage() {}

func (x *LeaveCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveCircleRequest.ProtoReflect.Descriptor instead.
func (*LeaveCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{7}
}

func (x *LeaveCircleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LeaveCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type GetUserCirclesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCirclesRequest) Reset() {
	*x = GetUserCirclesRequest{}
	mi := &file_circle_circle_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCirclesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCirclesRequest) ProtoMessage() {}

func (x *GetUserCirclesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCirclesRequest.ProtoReflect.Descriptor instead.
func (*GetUserCirclesRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserCirclesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserCirclesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserCirclesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetUserCirclesResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Circles       []*shared.Circle         `protobuf:"bytes,1,rep,name=circles,proto3" json:"circles,omitempty"`
	Memberships   []*shared.MembershipInfo `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty"`
	TotalCount    int32                    `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCirclesResponse) Reset() {
	*x = GetUserCirclesResponse{}
	mi := &file_circle_circle_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCirclesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCirclesResponse) ProtoMessage() {}

func (x *GetUserCirclesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCirclesResponse.ProtoReflect.Descriptor instead.
func (*GetUserCirclesResponse) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserCirclesResponse) GetCircles() []*shared.Circle {
	if x != nil {
		return x.Circles
	}
	return nil
}

func (x *GetUserCirclesResponse) GetMemberships() []*shared.MembershipInfo {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *GetUserCirclesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetCircleMembersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCircleMembersRequest) Reset() {
	*x = GetCircleMembersRequest{}
	mi := &file_circle_circle_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCircleMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircleMembersRequest) ProtoMessage() {}

func (x *GetCircleMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircleMembersRequest.ProtoReflect.Descriptor instead.
func (*GetCircleMembersRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{10}
}

func (x *GetCircleMembersRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *GetCircleMembersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetCircleMembersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetCircleMembersResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Users         []*shared.User           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Memberships   []*shared.MembershipInfo `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty"`
	TotalCount    int32                    `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCircleMembersResponse) Reset() {
	*x = GetCircleMembersResponse{}
	mi := &file_circle_circle_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCircleMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircleMembersResponse) ProtoMessage() {}

func (x *GetCircleMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircleMembersResponse.ProtoReflect.Descriptor instead.
func (*GetCircleMembersResponse) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{11}
}

func (x *GetCircleMembersResponse) GetUsers() []*shared.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetCircleMembersResponse) GetMemberships() []*shared.MembershipInfo {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *GetCircleMembersResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateMemberRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,2,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	NewRole       shared.Role            `protobuf:"varint,3,opt,name=new_role,json=newRole,proto3,enum=blipper.shared.v1.Role" json:"new_role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMemberRoleRequest) Reset() {
	*x = UpdateMemberRoleRequest{}
	mi := &file_circle_circle_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMemberRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberRoleRequest) ProtoMessage() {}

func (x *UpdateMemberRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemberRoleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateMemberRoleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateMemberRoleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *UpdateMemberRoleRequest) GetNewRole() shared.Role {
	if x != nil {
		return x.NewRole
	}
	return shared.Role(0)
}

type GetMembershipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,2,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMembershipRequest) Reset() {
	*x = GetMembershipRequest{}
	mi := &file_circle_circle_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembershipRequest) ProtoMessage() {}

func (x *GetMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembershipRequest.ProtoReflect.Descriptor instead.
func (*GetMembershipRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{13}
}

func (x *GetMembershipRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetMembershipRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type ListJoinRequestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJoinRequestsRequest) Reset() {
	*x = ListJoinRequestsRequest{}
	mi := &file_circle_circle_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJoinRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJoinRequestsRequest) ProtoMessage() {}

func (x *ListJoinRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJoinRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListJoinRequestsRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{14}
}

func (x *ListJoinRequestsRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *ListJoinRequestsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListJoinRequestsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListJoinRequestsResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Requests      []*ListJoinRequestsResponse_JoinRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	TotalCount    int32                                   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJoinRequestsResponse) Reset() {
	*x = ListJoinRequestsResponse{}
	mi := &file_circle_circle_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJoinRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJoinRequestsResponse) ProtoMessage() {}

func (x *ListJoinRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJoinRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListJoinRequestsResponse) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{15}
}

func (x *ListJoinRequestsResponse) GetRequests() []*ListJoinRequestsResponse_JoinRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ListJoinRequestsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ApproveJoinRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,2,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveJoinRequestRequest) Reset() {
	*x = ApproveJoinRequestRequest{}
	mi := &file_circle_circle_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveJoinRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveJoinRequestRequest) ProtoMessage() {}

func (x *ApproveJoinRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveJoinRequestRequest.ProtoReflect.Descriptor instead.
func (*ApproveJoinRequestRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{16}
}

func (x *ApproveJoinRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ApproveJoinRequestRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type RejectJoinRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,2,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectJoinRequestRequest) Reset() {
	*x = RejectJoinRequestRequest{}
	mi := &file_circle_circle_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectJoinRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectJoinRequestRequest) ProtoMessage() {}

func (x *RejectJoinRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectJoinRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectJoinRequestRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{17}
}

func (x *RejectJoinRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RejectJoinRequestRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type ListJoinRequestsResponse_JoinRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CircleId      string                 `protobuf:"bytes,2,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	RequestedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	User          *shared.User           `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJoinRequestsResponse_JoinRequest) Reset() {
	*x = ListJoinRequestsResponse_JoinRequest{}
	mi := &file_circle_circle_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJoinRequestsResponse_JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJoinRequestsResponse_JoinRequest) ProtoMessage() {}

func (x *ListJoinRequestsResponse_JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJoinRequestsResponse_JoinRequest.ProtoReflect.Descriptor instead.
func (*ListJoinRequestsResponse_JoinRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ListJoinRequestsResponse_JoinRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListJoinRequestsResponse_JoinRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *ListJoinRequestsResponse_JoinRequest) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *ListJoinRequestsResponse_JoinRequest) GetUser() *shared.User {
	if x != nil {
		return x.User
	}
	return nil
}

var File_circle_circle_proto protoreflect.FileDescriptor

var file_circle_circle_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x6b, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x52, 0x07, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x32, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x12,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x52, 0x07, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x6f,
	0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x67, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xaf, 0x01, 0x0a,
	0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x51,
	0x0a, 0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x50, 0x0a, 0x18, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x32, 0x9c, 0x0a, 0x0a, 0x12, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x4a,
	0x6f, 0x69, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x27, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x11, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x42, 0x27, 0x5a, 0x07, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0xaa, 0x02, 0x1b,
	0x42, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_circle_circle_proto_rawDescOnce sync.Once
	file_circle_circle_proto_rawDescData = file_circle_circle_proto_rawDesc
)

func file_circle_circle_proto_rawDescGZIP() []byte {
	file_circle_circle_proto_rawDescOnce.Do(func() {
		file_circle_circle_proto_rawDescData = protoimpl.X.CompressGZIP(file_circle_circle_proto_rawDescData)
	})
	return file_circle_circle_proto_rawDescData
}

var file_circle_circle_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_circle_circle_proto_goTypes = []any{
	(*CreateCircleRequest)(nil),                  // 0: blipper.circle.v1.CreateCircleRequest
	(*GetCircleRequest)(nil),                     // 1: blipper.circle.v1.GetCircleRequest
	(*ListCirclesRequest)(nil),                   // 2: blipper.circle.v1.ListCirclesRequest
	(*ListCirclesResponse)(nil),                  // 3: blipper.circle.v1.ListCirclesResponse
	(*UpdateCircleRequest)(nil),                  // 4: blipper.circle.v1.UpdateCircleRequest
	(*DeleteCircleRequest)(nil),                  // 5: blipper.circle.v1.DeleteCircleRequest
	(*JoinCircleRequest)(nil),                    // 6: blipper.circle.v1.JoinCircleRequest
	(*LeaveCircleRequest)(nil),                   // 7: blipper.circle.v1.LeaveCircleRequest
	(*GetUserCirclesRequest)(nil),                // 8: blipper.circle.v1.GetUserCirclesRequest
	(*GetUserCirclesResponse)(nil),               // 9: blipper.circle.v1.GetUserCirclesResponse
	(*GetCircleMembersRequest)(nil),              // 10: blipper.circle.v1.GetCircleMembersRequest
	(*GetCircleMembersResponse)(nil),             // 11: blipper.circle.v1.GetCircleMembersResponse
	(*UpdateMemberRoleRequest)(nil),              // 12: blipper.circle.v1.UpdateMemberRoleRequest
	(*GetMembershipRequest)(nil),                 // 13: blipper.circle.v1.GetMembershipRequest
	(*ListJoinRequestsRequest)(nil),              // 14: blipper.circle.v1.ListJoinRequestsRequest
	(*ListJoinRequestsResponse)(nil),             // 15: blipper.circle.v1.ListJoinRequestsResponse
	(*ApproveJoinRequestRequest)(nil),            // 16: blipper.circle.v1.ApproveJoinRequestRequest
	(*RejectJoinRequestRequest)(nil),             // 17: blipper.circle.v1.RejectJoinRequestRequest
	(*ListJoinRequestsResponse_JoinRequest)(nil), // 18: blipper.circle.v1.ListJoinRequestsResponse.JoinRequest
	(*shared.Circle)(nil),                        // 19: blipper.shared.v1.Circle
	(*shared.MembershipInfo)(nil),                // 20: blipper.shared.v1.MembershipInfo
	(*shared.User)(nil),                          // 21: blipper.shared.v1.User
	(shared.Role)(0),                             // 22: blipper.shared.v1.Role
	(*timestamppb.Timestamp)(nil),                // 23: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                        // 24: google.protobuf.Empty
}
var file_circle_circle_proto_depIdxs = []int32{
	19, // 0: blipper.circle.v1.ListCirclesResponse.circles:type_name -> blipper.shared.v1.Circle
	19, // 1: blipper.circle.v1.GetUserCirclesResponse.circles:type_name -> blipper.shared.v1.Circle
	20, // 2: blipper.circle.v1.GetUserCirclesResponse.memberships:type_name -> blipper.shared.v1.MembershipInfo
	21, // 3: blipper.circle.v1.GetCircleMembersResponse.users:type_name -> blipper.shared.v1.User
	20, // 4: blipper.circle.v1.GetCircleMembersResponse.memberships:type_name -> blipper.shared.v1.MembershipInfo
	22, // 5: blipper.circle.v1.UpdateMemberRoleRequest.new_role:type_name -> blipper.shared.v1.Role
	18, // 6: blipper.circle.v1.ListJoinRequestsResponse.requests:type_name -> blipper.circle.v1.ListJoinRequestsResponse.JoinRequest
	23, // 7: blipper.circle.v1.ListJoinRequestsResponse.JoinRequest.requested_at:type_name -> google.protobuf.Timestamp
	21, // 8: blipper.circle.v1.ListJoinRequestsResponse.JoinRequest.user:type_name -> blipper.shared.v1.User
	0,  // 9: blipper.circle.v1.CircleProtoService.CreateCircle:input_type -> blipper.circle.v1.CreateCircleRequest
	1,  // 10: blipper.circle.v1.CircleProtoService.GetCircle:input_type -> blipper.circle.v1.GetCircleRequest
	2,  // 11: blipper.circle.v1.CircleProtoService.ListCircles:input_type -> blipper.circle.v1.ListCirclesRequest
	4,  // 12: blipper.circle.v1.CircleProtoService.UpdateCircle:input_type -> blipper.circle.v1.UpdateCircleRequest
	5,  // 13: blipper.circle.v1.CircleProtoService.DeleteCircle:input_type -> blipper.circle.v1.DeleteCircleRequest
	6,  // 14: blipper.circle.v1.CircleProtoService.JoinCircle:input_type -> blipper.circle.v1.JoinCircleRequest
	7,  // 15: blipper.circle.v1.CircleProtoService.LeaveCircle:input_type -> blipper.circle.v1.LeaveCircleRequest
	8,  // 16: blipper.circle.v1.CircleProtoService.GetUserCircles:input_type -> blipper.circle.v1.GetUserCirclesRequest
	10, // 17: blipper.circle.v1.CircleProtoService.GetCircleMembers:input_type -> blipper.circle.v1.GetCircleMembersRequest
	12, // 18: blipper.circle.v1.CircleProtoService.UpdateMemberRole:input_type -> blipper.circle.v1.UpdateMemberRoleRequest
	13, // 19: blipper.circle.v1.CircleProtoService.GetMembership:input_type -> blipper.circle.v1.GetMembershipRequest
	14, // 20: blipper.circle.v1.CircleProtoService.ListJoinRequests:input_type -> blipper.circle.v1.ListJoinRequestsRequest
	16, // 21: blipper.circle.v1.CircleProtoService.ApproveJoinRequest:input_type -> blipper.circle.v1.ApproveJoinRequestRequest
	17, // 22: blipper.circle.v1.CircleProtoService.RejectJoinRequest:input_type -> blipper.circle.v1.RejectJoinRequestRequest
	19, // 23: blipper.circle.v1.CircleProtoService.CreateCircle:output_type -> blipper.shared.v1.Circle
	19, // 24: blipper.circle.v1.CircleProtoService.GetCircle:output_type -> blipper.shared.v1.Circle
	3,  // 25: blipper.circle.v1.CircleProtoService.ListCircles:output_type -> blipper.circle.v1.ListCirclesResponse
	19, // 26: blipper.circle.v1.CircleProtoService.UpdateCircle:output_type -> blipper.shared.v1.Circle
	24, // 27: blipper.circle.v1.CircleProtoService.DeleteCircle:output_type -> google.protobuf.Empty
	20, // 28: blipper.circle.v1.CircleProtoService.JoinCircle:output_type -> blipper.shared.v1.MembershipInfo
	24, // 29: blipper.circle.v1.CircleProtoService.LeaveCircle:output_type -> google.protobuf.Empty
	9,  // 30: blipper.circle.v1.CircleProtoService.GetUserCircles:output_type -> blipper.circle.v1.GetUserCirclesResponse
	11, // 31: blipper.circle.v1.CircleProtoService.GetCircleMembers:output_type -> blipper.circle.v1.GetCircleMembersResponse
	20, // 32: blipper.circle.v1.CircleProtoService.UpdateMemberRole:output_type -> blipper.shared.v1.MembershipInfo
	20, // 33: blipper.circle.v1.CircleProtoService.GetMembership:output_type -> blipper.shared.v1.MembershipInfo
	15, // 34: blipper.circle.v1.CircleProtoService.ListJoinRequests:output_type -> blipper.circle.v1.ListJoinRequestsResponse
	20, // 35: blipper.circle.v1.CircleProtoService.ApproveJoinRequest:output_type -> blipper.shared.v1.MembershipInfo
	24, // 36: blipper.circle.v1.CircleProtoService.RejectJoinRequest:output_type -> google.protobuf.Empty
	23, // [23:37] is the sub-list for method output_type
	9,  // [9:23] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_circle_circle_proto_init() }
func file_circle_circle_proto_init() {
	if File_circle_circle_proto != nil {
		return
	}
	file_circle_circle_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_circle_circle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_circle_circle_proto_goTypes,
		DependencyIndexes: file_circle_circle_proto_depIdxs,
		MessageInfos:      file_circle_circle_proto_msgTypes,
	}.Build()
	File_circle_circle_proto = out.File
	file_circle_circle_proto_rawDesc = nil
	file_circle_circle_proto_goTypes = nil
	file_circle_circle_proto_depIdxs = nil
}
