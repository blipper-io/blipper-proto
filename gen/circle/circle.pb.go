// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.2
// source: circle/circle.proto

package circle

import (
	shared "github.com/blipper-io/blipper-proto/gen/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Circle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	LogoUrl       string                 `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	IsPrivate     bool                   `protobuf:"varint,5,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	OwnerId       string                 `protobuf:"bytes,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	MemberCount   int32                  `protobuf:"varint,7,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Owner         *shared.UserInfo       `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Circle) Reset() {
	*x = Circle{}
	mi := &file_circle_circle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle) ProtoMessage() {}

func (x *Circle) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle.ProtoReflect.Descriptor instead.
func (*Circle) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{0}
}

func (x *Circle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Circle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Circle) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Circle) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Circle) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *Circle) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Circle) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Circle) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Circle) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Circle) GetOwner() *shared.UserInfo {
	if x != nil {
		return x.Owner
	}
	return nil
}

// Request/Response messages
type CreateCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsPrivate     bool                   `protobuf:"varint,3,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	LogoUrl       string                 `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	OwnerId       string                 `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCircleRequest) Reset() {
	*x = CreateCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCircleRequest) ProtoMessage() {}

func (x *CreateCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCircleRequest.ProtoReflect.Descriptor instead.
func (*CreateCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCircleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCircleRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCircleRequest) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *CreateCircleRequest) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *CreateCircleRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type GetCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCircleRequest) Reset() {
	*x = GetCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircleRequest) ProtoMessage() {}

func (x *GetCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircleRequest.ProtoReflect.Descriptor instead.
func (*GetCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{2}
}

func (x *GetCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type UpdateCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	Description   *string                `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	LogoUrl       *string                `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3,oneof" json:"logo_url,omitempty"`
	IsPrivate     *bool                  `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3,oneof" json:"is_private,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCircleRequest) Reset() {
	*x = UpdateCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCircleRequest) ProtoMessage() {}

func (x *UpdateCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCircleRequest.ProtoReflect.Descriptor instead.
func (*UpdateCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *UpdateCircleRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateCircleRequest) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

func (x *UpdateCircleRequest) GetIsPrivate() bool {
	if x != nil && x.IsPrivate != nil {
		return *x.IsPrivate
	}
	return false
}

type ListCirclesRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Pagination    *shared.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	SearchTerm    *string                   `protobuf:"bytes,2,opt,name=search_term,json=searchTerm,proto3,oneof" json:"search_term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCirclesRequest) Reset() {
	*x = ListCirclesRequest{}
	mi := &file_circle_circle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCirclesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCirclesRequest) ProtoMessage() {}

func (x *ListCirclesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCirclesRequest.ProtoReflect.Descriptor instead.
func (*ListCirclesRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{4}
}

func (x *ListCirclesRequest) GetPagination() *shared.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCirclesRequest) GetSearchTerm() string {
	if x != nil && x.SearchTerm != nil {
		return *x.SearchTerm
	}
	return ""
}

type ListCirclesResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Circles       []*Circle                  `protobuf:"bytes,1,rep,name=circles,proto3" json:"circles,omitempty"`
	Pagination    *shared.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCirclesResponse) Reset() {
	*x = ListCirclesResponse{}
	mi := &file_circle_circle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCirclesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCirclesResponse) ProtoMessage() {}

func (x *ListCirclesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCirclesResponse.ProtoReflect.Descriptor instead.
func (*ListCirclesResponse) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{5}
}

func (x *ListCirclesResponse) GetCircles() []*Circle {
	if x != nil {
		return x.Circles
	}
	return nil
}

func (x *ListCirclesResponse) GetPagination() *shared.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DeleteCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCircleRequest) Reset() {
	*x = DeleteCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCircleRequest) ProtoMessage() {}

func (x *DeleteCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCircleRequest.ProtoReflect.Descriptor instead.
func (*DeleteCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

type JoinCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinCircleRequest) Reset() {
	*x = JoinCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCircleRequest) ProtoMessage() {}

func (x *JoinCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCircleRequest.ProtoReflect.Descriptor instead.
func (*JoinCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{7}
}

func (x *JoinCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *JoinCircleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type LeaveCircleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaveCircleRequest) Reset() {
	*x = LeaveCircleRequest{}
	mi := &file_circle_circle_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveCircleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveCircleRequest) ProtoMessage() {}

func (x *LeaveCircleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveCircleRequest.ProtoReflect.Descriptor instead.
func (*LeaveCircleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{8}
}

func (x *LeaveCircleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *LeaveCircleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserCirclesRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	UserId        string                    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pagination    *shared.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCirclesRequest) Reset() {
	*x = GetUserCirclesRequest{}
	mi := &file_circle_circle_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCirclesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCirclesRequest) ProtoMessage() {}

func (x *GetUserCirclesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCirclesRequest.ProtoReflect.Descriptor instead.
func (*GetUserCirclesRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserCirclesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserCirclesRequest) GetPagination() *shared.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetUserCirclesResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Circles       []*Circle                  `protobuf:"bytes,1,rep,name=circles,proto3" json:"circles,omitempty"`
	Memberships   []*shared.MembershipInfo   `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty"`
	Pagination    *shared.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCirclesResponse) Reset() {
	*x = GetUserCirclesResponse{}
	mi := &file_circle_circle_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCirclesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCirclesResponse) ProtoMessage() {}

func (x *GetUserCirclesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCirclesResponse.ProtoReflect.Descriptor instead.
func (*GetUserCirclesResponse) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserCirclesResponse) GetCircles() []*Circle {
	if x != nil {
		return x.Circles
	}
	return nil
}

func (x *GetUserCirclesResponse) GetMemberships() []*shared.MembershipInfo {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *GetUserCirclesResponse) GetPagination() *shared.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetCircleMembersRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	CircleId      string                    `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	Pagination    *shared.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCircleMembersRequest) Reset() {
	*x = GetCircleMembersRequest{}
	mi := &file_circle_circle_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCircleMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircleMembersRequest) ProtoMessage() {}

func (x *GetCircleMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircleMembersRequest.ProtoReflect.Descriptor instead.
func (*GetCircleMembersRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{11}
}

func (x *GetCircleMembersRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *GetCircleMembersRequest) GetPagination() *shared.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetCircleMembersResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Users         []*shared.UserInfo         `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Memberships   []*shared.MembershipInfo   `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty"`
	Pagination    *shared.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCircleMembersResponse) Reset() {
	*x = GetCircleMembersResponse{}
	mi := &file_circle_circle_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCircleMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCircleMembersResponse) ProtoMessage() {}

func (x *GetCircleMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCircleMembersResponse.ProtoReflect.Descriptor instead.
func (*GetCircleMembersResponse) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{12}
}

func (x *GetCircleMembersResponse) GetUsers() []*shared.UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetCircleMembersResponse) GetMemberships() []*shared.MembershipInfo {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *GetCircleMembersResponse) GetPagination() *shared.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateMemberRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NewRole       shared.Role            `protobuf:"varint,3,opt,name=new_role,json=newRole,proto3,enum=blipper.shared.v1.Role" json:"new_role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMemberRoleRequest) Reset() {
	*x = UpdateMemberRoleRequest{}
	mi := &file_circle_circle_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMemberRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemberRoleRequest) ProtoMessage() {}

func (x *UpdateMemberRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemberRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemberRoleRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateMemberRoleRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *UpdateMemberRoleRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateMemberRoleRequest) GetNewRole() shared.Role {
	if x != nil {
		return x.NewRole
	}
	return shared.Role(0)
}

type GetMembershipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMembershipRequest) Reset() {
	*x = GetMembershipRequest{}
	mi := &file_circle_circle_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembershipRequest) ProtoMessage() {}

func (x *GetMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembershipRequest.ProtoReflect.Descriptor instead.
func (*GetMembershipRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{14}
}

func (x *GetMembershipRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *GetMembershipRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListJoinRequestsRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	CircleId      string                    `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	Pagination    *shared.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJoinRequestsRequest) Reset() {
	*x = ListJoinRequestsRequest{}
	mi := &file_circle_circle_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJoinRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJoinRequestsRequest) ProtoMessage() {}

func (x *ListJoinRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJoinRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListJoinRequestsRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{15}
}

func (x *ListJoinRequestsRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *ListJoinRequestsRequest) GetPagination() *shared.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListJoinRequestsResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Users         []*shared.UserInfo         `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Memberships   []*shared.MembershipInfo   `protobuf:"bytes,2,rep,name=memberships,proto3" json:"memberships,omitempty"`
	Pagination    *shared.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListJoinRequestsResponse) Reset() {
	*x = ListJoinRequestsResponse{}
	mi := &file_circle_circle_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListJoinRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJoinRequestsResponse) ProtoMessage() {}

func (x *ListJoinRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJoinRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListJoinRequestsResponse) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{16}
}

func (x *ListJoinRequestsResponse) GetUsers() []*shared.UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListJoinRequestsResponse) GetMemberships() []*shared.MembershipInfo {
	if x != nil {
		return x.Memberships
	}
	return nil
}

func (x *ListJoinRequestsResponse) GetPagination() *shared.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ApproveJoinRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApproveJoinRequestRequest) Reset() {
	*x = ApproveJoinRequestRequest{}
	mi := &file_circle_circle_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveJoinRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveJoinRequestRequest) ProtoMessage() {}

func (x *ApproveJoinRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveJoinRequestRequest.ProtoReflect.Descriptor instead.
func (*ApproveJoinRequestRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{17}
}

func (x *ApproveJoinRequestRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *ApproveJoinRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RejectJoinRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CircleId      string                 `protobuf:"bytes,1,opt,name=circle_id,json=circleId,proto3" json:"circle_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectJoinRequestRequest) Reset() {
	*x = RejectJoinRequestRequest{}
	mi := &file_circle_circle_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectJoinRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectJoinRequestRequest) ProtoMessage() {}

func (x *RejectJoinRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_circle_circle_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectJoinRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectJoinRequestRequest) Descriptor() ([]byte, []int) {
	return file_circle_circle_proto_rawDescGZIP(), []int{18}
}

func (x *RejectJoinRequestRequest) GetCircleId() string {
	if x != nil {
		return x.CircleId
	}
	return ""
}

func (x *RejectJoinRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_circle_circle_proto protoreflect.FileDescriptor

var file_circle_circle_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x02, 0x0a, 0x06,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xa0, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x90, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x22, 0x91, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x07,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x45, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xd9, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52,
	0x6f, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x7c, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xd9, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6c,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x19, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50,
	0x0a, 0x18, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x32, 0x97, 0x0a, 0x0a, 0x0d, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x12, 0x23, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x73, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x12, 0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x12, 0x24, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0b, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x6c, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x27, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x6c, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6b, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x2a, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x62,
	0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x58, 0x0a, 0x11, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x62, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x1d, 0x5a, 0x07, 0x2f, 0x63,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0xaa, 0x02, 0x11, 0x42, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_circle_circle_proto_rawDescOnce sync.Once
	file_circle_circle_proto_rawDescData = file_circle_circle_proto_rawDesc
)

func file_circle_circle_proto_rawDescGZIP() []byte {
	file_circle_circle_proto_rawDescOnce.Do(func() {
		file_circle_circle_proto_rawDescData = protoimpl.X.CompressGZIP(file_circle_circle_proto_rawDescData)
	})
	return file_circle_circle_proto_rawDescData
}

var file_circle_circle_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_circle_circle_proto_goTypes = []any{
	(*Circle)(nil),                    // 0: blipper.circle.v1.Circle
	(*CreateCircleRequest)(nil),       // 1: blipper.circle.v1.CreateCircleRequest
	(*GetCircleRequest)(nil),          // 2: blipper.circle.v1.GetCircleRequest
	(*UpdateCircleRequest)(nil),       // 3: blipper.circle.v1.UpdateCircleRequest
	(*ListCirclesRequest)(nil),        // 4: blipper.circle.v1.ListCirclesRequest
	(*ListCirclesResponse)(nil),       // 5: blipper.circle.v1.ListCirclesResponse
	(*DeleteCircleRequest)(nil),       // 6: blipper.circle.v1.DeleteCircleRequest
	(*JoinCircleRequest)(nil),         // 7: blipper.circle.v1.JoinCircleRequest
	(*LeaveCircleRequest)(nil),        // 8: blipper.circle.v1.LeaveCircleRequest
	(*GetUserCirclesRequest)(nil),     // 9: blipper.circle.v1.GetUserCirclesRequest
	(*GetUserCirclesResponse)(nil),    // 10: blipper.circle.v1.GetUserCirclesResponse
	(*GetCircleMembersRequest)(nil),   // 11: blipper.circle.v1.GetCircleMembersRequest
	(*GetCircleMembersResponse)(nil),  // 12: blipper.circle.v1.GetCircleMembersResponse
	(*UpdateMemberRoleRequest)(nil),   // 13: blipper.circle.v1.UpdateMemberRoleRequest
	(*GetMembershipRequest)(nil),      // 14: blipper.circle.v1.GetMembershipRequest
	(*ListJoinRequestsRequest)(nil),   // 15: blipper.circle.v1.ListJoinRequestsRequest
	(*ListJoinRequestsResponse)(nil),  // 16: blipper.circle.v1.ListJoinRequestsResponse
	(*ApproveJoinRequestRequest)(nil), // 17: blipper.circle.v1.ApproveJoinRequestRequest
	(*RejectJoinRequestRequest)(nil),  // 18: blipper.circle.v1.RejectJoinRequestRequest
	(*timestamppb.Timestamp)(nil),     // 19: google.protobuf.Timestamp
	(*shared.UserInfo)(nil),           // 20: blipper.shared.v1.UserInfo
	(*shared.PaginationRequest)(nil),  // 21: blipper.shared.v1.PaginationRequest
	(*shared.PaginationResponse)(nil), // 22: blipper.shared.v1.PaginationResponse
	(*shared.MembershipInfo)(nil),     // 23: blipper.shared.v1.MembershipInfo
	(shared.Role)(0),                  // 24: blipper.shared.v1.Role
	(*emptypb.Empty)(nil),             // 25: google.protobuf.Empty
}
var file_circle_circle_proto_depIdxs = []int32{
	19, // 0: blipper.circle.v1.Circle.created_at:type_name -> google.protobuf.Timestamp
	19, // 1: blipper.circle.v1.Circle.updated_at:type_name -> google.protobuf.Timestamp
	20, // 2: blipper.circle.v1.Circle.owner:type_name -> blipper.shared.v1.UserInfo
	21, // 3: blipper.circle.v1.ListCirclesRequest.pagination:type_name -> blipper.shared.v1.PaginationRequest
	0,  // 4: blipper.circle.v1.ListCirclesResponse.circles:type_name -> blipper.circle.v1.Circle
	22, // 5: blipper.circle.v1.ListCirclesResponse.pagination:type_name -> blipper.shared.v1.PaginationResponse
	21, // 6: blipper.circle.v1.GetUserCirclesRequest.pagination:type_name -> blipper.shared.v1.PaginationRequest
	0,  // 7: blipper.circle.v1.GetUserCirclesResponse.circles:type_name -> blipper.circle.v1.Circle
	23, // 8: blipper.circle.v1.GetUserCirclesResponse.memberships:type_name -> blipper.shared.v1.MembershipInfo
	22, // 9: blipper.circle.v1.GetUserCirclesResponse.pagination:type_name -> blipper.shared.v1.PaginationResponse
	21, // 10: blipper.circle.v1.GetCircleMembersRequest.pagination:type_name -> blipper.shared.v1.PaginationRequest
	20, // 11: blipper.circle.v1.GetCircleMembersResponse.users:type_name -> blipper.shared.v1.UserInfo
	23, // 12: blipper.circle.v1.GetCircleMembersResponse.memberships:type_name -> blipper.shared.v1.MembershipInfo
	22, // 13: blipper.circle.v1.GetCircleMembersResponse.pagination:type_name -> blipper.shared.v1.PaginationResponse
	24, // 14: blipper.circle.v1.UpdateMemberRoleRequest.new_role:type_name -> blipper.shared.v1.Role
	21, // 15: blipper.circle.v1.ListJoinRequestsRequest.pagination:type_name -> blipper.shared.v1.PaginationRequest
	20, // 16: blipper.circle.v1.ListJoinRequestsResponse.users:type_name -> blipper.shared.v1.UserInfo
	23, // 17: blipper.circle.v1.ListJoinRequestsResponse.memberships:type_name -> blipper.shared.v1.MembershipInfo
	22, // 18: blipper.circle.v1.ListJoinRequestsResponse.pagination:type_name -> blipper.shared.v1.PaginationResponse
	1,  // 19: blipper.circle.v1.CircleService.CreateCircle:input_type -> blipper.circle.v1.CreateCircleRequest
	2,  // 20: blipper.circle.v1.CircleService.GetCircle:input_type -> blipper.circle.v1.GetCircleRequest
	4,  // 21: blipper.circle.v1.CircleService.ListCircles:input_type -> blipper.circle.v1.ListCirclesRequest
	3,  // 22: blipper.circle.v1.CircleService.UpdateCircle:input_type -> blipper.circle.v1.UpdateCircleRequest
	6,  // 23: blipper.circle.v1.CircleService.DeleteCircle:input_type -> blipper.circle.v1.DeleteCircleRequest
	7,  // 24: blipper.circle.v1.CircleService.JoinCircle:input_type -> blipper.circle.v1.JoinCircleRequest
	8,  // 25: blipper.circle.v1.CircleService.LeaveCircle:input_type -> blipper.circle.v1.LeaveCircleRequest
	9,  // 26: blipper.circle.v1.CircleService.GetUserCircles:input_type -> blipper.circle.v1.GetUserCirclesRequest
	11, // 27: blipper.circle.v1.CircleService.GetCircleMembers:input_type -> blipper.circle.v1.GetCircleMembersRequest
	13, // 28: blipper.circle.v1.CircleService.UpdateMemberRole:input_type -> blipper.circle.v1.UpdateMemberRoleRequest
	14, // 29: blipper.circle.v1.CircleService.GetMembership:input_type -> blipper.circle.v1.GetMembershipRequest
	15, // 30: blipper.circle.v1.CircleService.ListJoinRequests:input_type -> blipper.circle.v1.ListJoinRequestsRequest
	17, // 31: blipper.circle.v1.CircleService.ApproveJoinRequest:input_type -> blipper.circle.v1.ApproveJoinRequestRequest
	18, // 32: blipper.circle.v1.CircleService.RejectJoinRequest:input_type -> blipper.circle.v1.RejectJoinRequestRequest
	0,  // 33: blipper.circle.v1.CircleService.CreateCircle:output_type -> blipper.circle.v1.Circle
	0,  // 34: blipper.circle.v1.CircleService.GetCircle:output_type -> blipper.circle.v1.Circle
	5,  // 35: blipper.circle.v1.CircleService.ListCircles:output_type -> blipper.circle.v1.ListCirclesResponse
	0,  // 36: blipper.circle.v1.CircleService.UpdateCircle:output_type -> blipper.circle.v1.Circle
	25, // 37: blipper.circle.v1.CircleService.DeleteCircle:output_type -> google.protobuf.Empty
	23, // 38: blipper.circle.v1.CircleService.JoinCircle:output_type -> blipper.shared.v1.MembershipInfo
	25, // 39: blipper.circle.v1.CircleService.LeaveCircle:output_type -> google.protobuf.Empty
	10, // 40: blipper.circle.v1.CircleService.GetUserCircles:output_type -> blipper.circle.v1.GetUserCirclesResponse
	12, // 41: blipper.circle.v1.CircleService.GetCircleMembers:output_type -> blipper.circle.v1.GetCircleMembersResponse
	23, // 42: blipper.circle.v1.CircleService.UpdateMemberRole:output_type -> blipper.shared.v1.MembershipInfo
	23, // 43: blipper.circle.v1.CircleService.GetMembership:output_type -> blipper.shared.v1.MembershipInfo
	16, // 44: blipper.circle.v1.CircleService.ListJoinRequests:output_type -> blipper.circle.v1.ListJoinRequestsResponse
	23, // 45: blipper.circle.v1.CircleService.ApproveJoinRequest:output_type -> blipper.shared.v1.MembershipInfo
	25, // 46: blipper.circle.v1.CircleService.RejectJoinRequest:output_type -> google.protobuf.Empty
	33, // [33:47] is the sub-list for method output_type
	19, // [19:33] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_circle_circle_proto_init() }
func file_circle_circle_proto_init() {
	if File_circle_circle_proto != nil {
		return
	}
	file_circle_circle_proto_msgTypes[3].OneofWrappers = []any{}
	file_circle_circle_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_circle_circle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_circle_circle_proto_goTypes,
		DependencyIndexes: file_circle_circle_proto_depIdxs,
		MessageInfos:      file_circle_circle_proto_msgTypes,
	}.Build()
	File_circle_circle_proto = out.File
	file_circle_circle_proto_rawDesc = nil
	file_circle_circle_proto_goTypes = nil
	file_circle_circle_proto_depIdxs = nil
}
